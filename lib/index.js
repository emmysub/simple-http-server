// Generated by CoffeeScript 1.7.1
(function() {
  var async, fs, handleFile, handleRanges, http, join, mime, server, url;

  fs = require('fs');

  url = require('url');

  join = require('path').join;

  http = require('http');

  mime = require('mime');

  async = require('async');

  handleRanges = function(path, type, stats, request, response) {
    var chunksize, end, positions, range, size, start;
    range = request.headers.range;
    size = stats.size;
    positions = range.replace('bytes=', '').split('-');
    start = parseInt(positions[0], 10) || 0;
    end = parseInt(positions[1], 10);
    if (isNaN(end)) {
      end = size - 1;
    }
    chunksize = end - start + 1;
    response.writeHead(206, {
      'Accept-Ranges': 'bytes',
      'Content-Length': chunksize,
      'Content-Type': type,
      'Content-Range': 'bytes ' + start + '-' + end + '/' + size
    });
    return fs.createReadStream(path, {
      start: start,
      end: end
    }).pipe(response);
  };

  handleFile = function(path, stats, request, response) {
    var type;
    type = mime.lookup(path);
    if (request.headers.range) {
      handleRanges(path, type, stats, request, response);
      return;
    }
    response.writeHead(200, {
      'content-type': type
    });
    return fs.createReadStream(path).pipe(response);
  };

  server = http.createServer(function(request, response) {
    var dirname, path, pathname, respond;
    pathname = decodeURIComponent(url.parse(request.url).pathname);
    dirname = './';
    path = join(dirname, pathname);
    respond = function(body) {
      return response.write("<!doctype html>\n<head>\n  <meta name=\"viewport\" content=\"initial-scale=1.0,maximum-scale=1.0\"/>\n  <meta charset=\"utf-8\"/>\n</head>\n<body>" + body + "</body>");
    };
    return fs.stat(path, function(err, stats) {
      if (err) {
        response.writeHead(404);
        respond('<h1>404 - Not Found</h1>');
        response.end();
        return;
      }
      if (stats.isFile()) {
        handleFile(path, stats, request, response);
      }
      if (stats.isDirectory()) {
        return fs.readdir(path, function(err, files) {
          var types;
          if (err) {
            return console.log('internal server error?');
          }
          types = {};
          return async.eachLimit(files, 10, function(file, done) {
            file = join(path, file);
            return fs.stat(file, function(err, stats) {
              if (err) {
                return done(err);
              }
              types[file] = stats.isDirectory();
              return done();
            });
          }, function() {
            var body;
            response.writeHead(200, 'content-type: text/html');
            body = "<h1>Directory " + path + "</h1>";
            files.forEach(function(name) {
              var dir, file;
              file = join(path, name);
              dir = types[file] ? '/' : '';
              return body += "<li><a href=\"/" + file + "\">" + name + dir + "</a></li>";
            });
            respond(body);
            return response.end();
          });
        });
      }
    });
  });

  module.exports = server;

}).call(this);
